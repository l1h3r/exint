[wrapping_add]
overview = """
Wrapping (modular) addition. Computes `self + rhs`,
wrapping around at the boundary of the type.
"""
examples = """
assert_eq!(uint!(200).wrapping_add(uint!(55)), uint!(255));
assert_eq!(uint!(200).wrapping_add(uint::MAX), uint!(199));
"""

[wrapping_add_signed]
overview = """
Wrapping (modular) addition with a signed integer. Computes `self + rhs`,
wrapping around at the boundary of the type.
"""
examples = """
assert_eq!(uint!(1).wrapping_add_signed(int!(2)), uint!(3));
assert_eq!(uint!(1).wrapping_add_signed(int!(-2)), uint::MAX);
assert_eq!((uint::MAX - uint!(2)).wrapping_add_signed(int!(4)), uint!(1));
"""

[wrapping_sub]
overview = """
Wrapping (modular) subtraction. Computes `self - rhs`,
wrapping around at the boundary of the type.
"""
examples = """
assert_eq!(uint!(100).wrapping_sub(uint!(100)), uint!(0));
assert_eq!(uint!(100).wrapping_sub(uint::MAX), uint!(101));
"""

[wrapping_sub_signed]
overview = """
Wrapping (modular) subtraction with a signed integer. Computes `self - rhs`,
wrapping around at the boundary of the type.
"""
examples = """
assert_eq!(uint!(1).wrapping_sub_signed(int!(2)), uint::MAX);
assert_eq!(uint!(1).wrapping_sub_signed(int!(-2)), uint!(3));
assert_eq!((uint::MAX - uint!(2)).wrapping_sub_signed(int!(-4)), uint!(1));
"""

[wrapping_mul]
overview = """
Wrapping (modular) multiplication. Computes `self * rhs`,
wrapping around at the boundary of the type.
"""
examples = """
assert_eq!(uint!(10).wrapping_mul(uint!(12)), uint!(120));
assert_eq!(25u8.wrapping_mul(12), 44);
"""

[wrapping_div]
overview = """
Wrapping (modular) division. Computes `self / rhs`.

Wrapped division on unsigned types is just normal division. There's no way
wrapping could ever happen. This function exists, so that all operations are
accounted for in the wrapping operations.

# Panics

This function will panic if `rhs` is zero.
"""
examples = """
assert_eq!(uint!(100).wrapping_div(uint!(10)), uint!(10));
"""

[wrapping_div_euclid]
overview = """
Wrapping Euclidean division. Computes `self.div_euclid(rhs)`.

Wrapped division on unsigned types is just normal division. There's no way
wrapping could ever happen. This function exists, so that all operations are
accounted for in the wrapping operations. Since, for the positive integers, all
common definitions of division are equal, this is exactly equal to
`self.wrapping_div(rhs)`.

# Panics

This function will panic if `rhs` is zero.
"""
examples = """
assert_eq!(uint!(100).wrapping_div_euclid(uint!(10)), uint!(10));
"""

[wrapping_rem]
overview = """
Wrapping (modular) remainder. Computes `self % rhs`.

Wrapped remainder calculation on unsigned types is just the regular remainder
calculation. There's no way wrapping could ever happen. This function exists, so
that all operations are accounted for in the wrapping operations.

# Panics

This function will panic if `rhs` is zero.
"""
examples = """
assert_eq!(uint!(100).wrapping_rem(uint!(10)), uint!(0));
"""

[wrapping_rem_euclid]
overview = """
Wrapping Euclidean modulo. Computes `self.rem_euclid(rhs)`.

Wrapped modulo calculation on unsigned types is just the regular remainder
calculation. There's no way wrapping could ever happen. This function exists, so
that all operations are accounted for in the wrapping operations. Since, for the
positive integers, all common definitions of division are equal, this is exactly
equal to `self.wrapping_rem(rhs)`.

# Panics

This function will panic if `rhs` is zero.
"""
examples = """
assert_eq!(uint!(100).wrapping_rem_euclid(uint!(10)), uint!(0));
"""

[wrapping_shl]
overview = """
Panic-free bitwise shift-left; yields `self << mask(rhs)`, where `mask` removes
any high-order bits of `rhs` that would cause the shift to exceed the bitwidth
of the type.

Note that this is *not* the same as a rotate-left; the RHS of a wrapping
shift-left is restricted to the range of the type, rather than the bits shifted
out of the LHS being returned to the other end. The primitive integer types all
implement a [`rotate_left`] function, which may be what you want instead.

[`rotate_left`]: Self::rotate_left
"""
examples = """
assert_eq!(uint!(1).wrapping_shl(7), uint!(128));
assert_eq!(uint!(1).wrapping_shl(128), uint!(1));
"""

[wrapping_shr]
overview = """
Panic-free bitwise shift-right; yields `self >> mask(rhs)`, where `mask` removes
any high-order bits of `rhs` that would cause the shift to exceed the bitwidth
of the type.

Note that this is *not* the same as a rotate-right; the RHS of a wrapping
shift-right is restricted to the range of the type, rather than the bits shifted
out of the LHS being returned to the other end. The primitive integer types all
implement a [`rotate_right`] function, which may be what you want instead.

[`rotate_right`]: Self::rotate_right
"""
examples = """
assert_eq!(uint!(128).wrapping_shr(7), uint!(1));
assert_eq!(uint!(128).wrapping_shr(128), uint!(128));
"""

[wrapping_neg]
overview = """
Wrapping (modular) negation. Computes `-self`,
wrapping around at the boundary of the type.

Since unsigned types do not have negative equivalents all applications of this
function will wrap (except for `-0`). For values smaller than the corresponding
signed type's maximum the result is the same as casting the corresponding signed
value. Any larger values are equivalent to `MAX + 1 - (val - MAX - 1)` where
`MAX` is the corresponding signed type's maximum.
"""
examples = """
assert_eq!(uint!(0).wrapping_neg(), uint!(0));
assert_eq!(uint::MAX.wrapping_neg(), uint!(1));
assert_eq!(uint!(13).wrapping_neg(), (!uint!(13)) + uint!(1));
assert_eq!(uint!(42).wrapping_neg(), !(uint!(42) - uint!(1)));
"""

[wrapping_pow]
overview = """
Wrapping (modular) exponentiation. Computes `self.pow(exp)`,
wrapping around at the boundary of the type.
"""
examples = """
assert_eq!(uint!(3).wrapping_pow(5), uint!(243));
assert_eq!(3u8.wrapping_pow(6), 217);
"""

[wrapping_next_power_of_two]
overview = """
Returns the smallest power of two greater than or equal to `n`. If the next
power of two is greater than the type's maximum value, the return value is
wrapped to `0`.
"""
examples = """
assert_eq!(uint!(2).wrapping_next_power_of_two(), uint!(2));
assert_eq!(uint!(3).wrapping_next_power_of_two(), uint!(4));
assert_eq!(uint::MAX.wrapping_next_power_of_two(), uint!(0));
"""
