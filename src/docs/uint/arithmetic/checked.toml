[checked_add]
overview = """
Checked integer addition. Computes `self + rhs`,
returning `None` if overflow occurred.
"""
examples = """
assert_eq!((uint::MAX - uint!(2)).checked_add(uint!(1)), Some(uint::MAX - uint!(1)));
assert_eq!((uint::MAX - uint!(2)).checked_add(uint!(3)), None);
"""

[checked_add_signed]
overview = """
Checked addition with a signed integer. Computes `self + rhs`,
returning `None` if overflow occurred.
"""
examples = """
assert_eq!(uint!(1).checked_add_signed(int!(2)), Some(uint!(3)));
assert_eq!(uint!(1).checked_add_signed(int!(-2)), None);
assert_eq!((uint::MAX - uint!(2)).checked_add_signed(int!(3)), None);
"""

[checked_sub]
overview = """
Checked integer subtraction. Computes `self - rhs`,
returning `None` if overflow occurred.
"""
examples = """
assert_eq!(uint!(1).checked_sub(uint!(1)), Some(uint!(0)));
assert_eq!(uint!(0).checked_sub(uint!(1)), None);
"""

[checked_sub_signed]
overview = """
Checked subtraction with a signed integer. Computes `self - rhs`,
returning `None` if overflow occurred.
"""
examples = """
assert_eq!(uint!(1).checked_sub_signed(int!(2)), None);
assert_eq!(uint!(1).checked_sub_signed(int!(-2)), Some(uint!(3)));
assert_eq!((uint::MAX - uint!(2)).checked_sub_signed(int!(-4)), None);
"""

[checked_mul]
overview = """
Checked integer multiplication. Computes `self * rhs`,
returning `None` if overflow occurred.
"""
examples = """
assert_eq!(uint!(5).checked_mul(uint!(1)), Some(uint!(5)));
assert_eq!(uint::MAX.checked_mul(uint!(2)), None);
"""

[checked_div]
overview = """
Checked integer division. Computes `self / rhs`,
returning `None` if `rhs == 0`.
"""
examples = """
assert_eq!(uint!(128).checked_div(uint!(2)), Some(uint!(64)));
assert_eq!(uint!(1).checked_div(uint!(0)), None);
"""

[checked_div_euclid]
overview = """
Checked Euclidean division. Computes `self.div_euclid(rhs)`,
returning `None` if `rhs == 0`.
"""
examples = """
assert_eq!(uint!(128).checked_div_euclid(uint!(2)), Some(uint!(64)));
assert_eq!(uint!(1).checked_div_euclid(uint!(0)), None);
"""

[checked_rem]
overview = """
Checked integer remainder. Computes `self % rhs`,
returning `None` if `rhs == 0`.
"""
examples = """
assert_eq!(uint!(5).checked_rem(uint!(2)), Some(uint!(1)));
assert_eq!(uint!(5).checked_rem(uint!(0)), None);
"""

[checked_rem_euclid]
overview = """
Checked Euclidean modulo. Computes `self.rem_euclid(rhs)`,
returning `None` if `rhs == 0`.
"""
examples = """
assert_eq!(uint!(5).checked_rem_euclid(uint!(2)), Some(uint!(1)));
assert_eq!(uint!(5).checked_rem_euclid(uint!(0)), None);
"""

[checked_shl]
overview = """
Checked shift left. Computes `self << rhs`, returning `None`
if `rhs` is larger than or equal to the number of bits in `self`.
"""
examples = """
assert_eq!(uint!(0x1).checked_shl(4), Some(uint!(0x10)));
assert_eq!(uint!(0x10).checked_shl(129), None);
assert_eq!(uint!(0x10).checked_shl(uint::BITS - 1), Some(uint!(0)));
"""

[checked_shr]
overview = """
Checked shift right. Computes `self >> rhs`, returning `None`
if `rhs` is larger than or equal to the number of bits in `self`.
"""
examples = """
assert_eq!(uint!(0x10).checked_shr(4), Some(uint!(0x1)));
assert_eq!(uint!(0x10).checked_shr(129), None);
"""

[checked_neg]
overview = """
Checked negation. Computes `-self`,
returning `None` unless `self == 0`.

Note that negating any positive integer will overflow.
"""
examples = """
assert_eq!(uint!(0).checked_neg(), Some(uint!(0)));
assert_eq!(uint!(1).checked_neg(), None);
"""

[checked_pow]
overview = """
Checked exponentiation. Computes `self.pow(exp)`,
returning `None` if overflow occurred.
"""
examples = """
assert_eq!(uint!(2).checked_pow(5), Some(uint!(32)));
assert_eq!(uint::MAX.checked_pow(2), None);
"""

[checked_next_power_of_two]
overview = """
Returns the smallest power of two greater than or equal to `self`.

If the next power of two is greater than the type's maximum value,
`None` is returned, otherwise the power of two is wrapped in `Some`.
"""
examples = """
assert_eq!(uint!(2).checked_next_power_of_two(), Some(uint!(2)));
assert_eq!(uint!(3).checked_next_power_of_two(), Some(uint!(4)));
assert_eq!(uint::MAX.checked_next_power_of_two(), None);
"""

[checked_next_multiple_of]
overview = """
Calculates the smallest value greater than or equal to `self` that is a multiple
of `rhs`. Returns `None` if `rhs` is zero or the operation would result in
overflow.
"""
examples = """
assert_eq!(uint!(16).checked_next_multiple_of(uint!(8)), Some(uint!(16)));
assert_eq!(uint!(23).checked_next_multiple_of(uint!(8)), Some(uint!(24)));
assert_eq!(uint!(1).checked_next_multiple_of(uint!(0)), None);
assert_eq!(uint::MAX.checked_next_multiple_of(uint!(2)), None);
"""

[checked_ilog]
overview = """
Returns the logarithm of the number with respect to an arbitrary base, rounded down.

Returns `None` if the number is zero, or if the base is not at least 2.

This method might not be optimized owing to implementation details;
`checked_ilog2` can produce results more efficiently for base 2, and
`checked_ilog10` can produce results more efficiently for base 10.
"""
examples = """
assert_eq!(uint!(5).checked_ilog(uint!(5)), Some(1));
"""

[checked_ilog2]
overview = """
Returns the base 2 logarithm of the number, rounded down.

Returns `None` if the number is zero.
"""
examples = """
assert_eq!(uint!(2).checked_ilog2(), Some(1));
"""

[checked_ilog10]
overview = """
Returns the base 10 logarithm of the number, rounded down.

Returns `None` if the number is zero.
"""
examples = """
assert_eq!(uint!(10).checked_ilog10(), Some(1));
"""

[checked_signed_diff]
overview = """
Checked integer subtraction. Computes `self - rhs` and checks if the result fits
into an [`int`], returning `None` if overflow occurred.
"""
examples = """
assert_eq!(uint!(10).checked_signed_diff(uint!(2)), Some(int!(8)));
assert_eq!(uint!(2).checked_signed_diff(uint!(10)), Some(int!(-8)));
assert_eq!(uint::MAX.checked_signed_diff(int::MAX.cast_unsigned()), None);
assert_eq!(int::MAX.cast_unsigned().checked_signed_diff(uint::MAX), Some(int::MIN));
assert_eq!((int::MAX.cast_unsigned() + uint!(1)).checked_signed_diff(uint!(0)), None);
assert_eq!(uint::MAX.checked_signed_diff(uint::MAX), Some(int!(0)));
"""
