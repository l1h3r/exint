[overflowing_add]
overview = """
Calculates `self` + `rhs`.

Returns a tuple of the addition along with a boolean indicating whether an
arithmetic overflow would occur. If an overflow would have occurred then the
wrapped value is returned.
"""
examples = """
assert_eq!(uint!(5).overflowing_add(uint!(2)), (uint!(7), false));
assert_eq!(uint::MAX.overflowing_add(uint!(1)), (uint!(0), true));
"""

[overflowing_add_signed]
overview = """
Calculates `self` + `rhs` with a signed `rhs`.

Returns a tuple of the addition along with a boolean indicating whether an
arithmetic overflow would occur. If an overflow would have occurred then the
wrapped value is returned.
"""
examples = """
assert_eq!(uint!(1).overflowing_add_signed(int!(2)), (uint!(3), false));
assert_eq!(uint!(1).overflowing_add_signed(int!(-2)), (uint::MAX, true));
assert_eq!((uint::MAX - uint!(2)).overflowing_add_signed(int!(4)), (uint!(1), true));
"""

[overflowing_sub]
overview = """
Calculates `self` - `rhs`.

Returns a tuple of the subtraction along with a boolean indicating whether an
arithmetic overflow would occur. If an overflow would have occurred then the
wrapped value is returned.
"""
examples = """
assert_eq!(uint!(5).overflowing_sub(uint!(2)), (uint!(3), false));
assert_eq!(uint!(0).overflowing_sub(uint!(1)), (uint::MAX, true));
"""

[overflowing_sub_signed]
overview = """
Calculates `self` - `rhs` with a signed `rhs`.

Returns a tuple of the subtraction along with a boolean indicating whether an
arithmetic overflow would occur. If an overflow would have occurred then the
wrapped value is returned.
"""
examples = """
assert_eq!(uint!(1).overflowing_sub_signed(int!(2)), (uint::MAX, true));
assert_eq!(uint!(1).overflowing_sub_signed(int!(-2)), (uint!(3), false));
assert_eq!((uint::MAX - uint!(2)).overflowing_sub_signed(int!(-4)), (uint!(1), true));
"""

[overflowing_mul]
overview = """
Calculates the multiplication of `self` and `rhs`.

Returns a tuple of the multiplication along with a boolean indicating whether an
arithmetic overflow would occur. If an overflow would have occurred then the
wrapped value is returned.
"""
examples = """
assert_eq!(uint!(5).overflowing_mul(uint!(2)), (uint!(10), false));
assert_eq!(uint!(1000000000).overflowing_mul(uint!(10)), (uint!(1410065408), true));
assert_eq!(uint::MAX.overflowing_mul(uint!(2)), (uint::MAX - uint!(1), true));
"""

[overflowing_div]
overview = """
Calculates the divisor when `self` is divided by `rhs`.

Returns a tuple of the divisor along with a boolean indicating whether an
arithmetic overflow would occur. Note that for unsigned integers overflow never
occurs, so the second value is always `false`.

# Panics

This function will panic if `rhs` is zero.
"""
examples = """
assert_eq!(uint!(5).overflowing_div(uint!(2)), (uint!(2), false));
"""

[overflowing_div_euclid]
overview = """
Calculates the quotient of Euclidean division `self.div_euclid(rhs)`.

Returns a tuple of the divisor along with a boolean indicating whether an
arithmetic overflow would occur. Note that for unsigned integers overflow never
occurs, so the second value is always `false`. Since, for the positive integers,
all common definitions of division are equal, this is exactly equal to
`self.overflowing_div(rhs)`.

# Panics

This function will panic if `rhs` is zero.
"""
examples = """
assert_eq!(uint!(5).overflowing_div_euclid(uint!(2)), (uint!(2), false));
"""

[overflowing_rem]
overview = """
Calculates the remainder when `self` is divided by `rhs`.

Returns a tuple of the remainder after dividing along with a boolean indicating
whether an arithmetic overflow would occur. Note that for unsigned integers
overflow never occurs, so the second value is always `false`.

# Panics

This function will panic if `rhs` is zero.
"""
examples = """
assert_eq!(uint!(5).overflowing_rem(uint!(2)), (uint!(1), false));
"""

[overflowing_rem_euclid]
overview = """
Calculates the remainder `self.rem_euclid(rhs)` as if by Euclidean division.

Returns a tuple of the modulo after dividing along with a boolean indicating
whether an arithmetic overflow would occur. Note that for unsigned integers
overflow never occurs, so the second value is always `false`. Since, for the
positive integers, all common definitions of division are equal, this operation
is exactly equal to `self.overflowing_rem(rhs)`.

# Panics

This function will panic if `rhs` is zero.
"""
examples = """
assert_eq!(uint!(5).overflowing_rem_euclid(uint!(2)), (uint!(1), false));
"""

[overflowing_shl]
overview = """
Shifts self left by `rhs` bits.

Returns a tuple of the shifted version of self along with a boolean indicating
whether the shift value was larger than or equal to the number of bits. If the
shift value is too large, then value is masked (N-1) where N is the number of
bits, and this value is then used to perform the shift.
"""
examples = """
assert_eq!(uint!(0x1).overflowing_shl(4), (uint!(0x10), false));
assert_eq!(uint!(0x1).overflowing_shl(132), (uint!(0x10), true));
assert_eq!(uint!(0x10).overflowing_shl(uint::BITS - 1), (uint!(0), false));
"""

[overflowing_shr]
overview = """
Shifts self right by `rhs` bits.

Returns a tuple of the shifted version of self along with a boolean indicating
whether the shift value was larger than or equal to the number of bits. If the
shift value is too large, then value is masked (N-1) where N is the number of
bits, and this value is then used to perform the shift.
"""
examples = """
assert_eq!(uint!(0x10).overflowing_shr(4), (uint!(0x1), false));
assert_eq!(uint!(0x10).overflowing_shr(132), (uint!(0x1), true));
"""

[overflowing_neg]
overview = """
Negates self in an overflowing fashion.

Returns `!self + 1` using wrapping operations to return the value that
represents the negation of this unsigned value. Note that for positive unsigned
values overflow always occurs, but negating 0 does not overflow.
"""
examples = """
assert_eq!(uint!(0).overflowing_neg(), (uint!(0), false));
assert_eq!(uint!(2).overflowing_neg(), (uint::MAX - uint!(1), true));
"""

[overflowing_pow]
overview = """
Raises self to the power of `exp`, using exponentiation by squaring.

Returns a tuple of the exponentiation along with a bool indicating whether an
overflow happened.
"""
examples = """
assert_eq!(uint!(3).overflowing_pow(5), (uint!(243), false));
assert_eq!(3u8.overflowing_pow(6), (217, true));
"""
