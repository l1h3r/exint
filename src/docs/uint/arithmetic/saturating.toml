[saturating_add]
overview = """
Saturating integer addition. Computes `self + rhs`,
saturating at the numeric bounds instead of overflowing.
"""
examples = """
assert_eq!(uint!(100).saturating_add(uint!(1)), uint!(101));
assert_eq!(uint::MAX.saturating_add(uint!(127)), uint::MAX);
"""

[saturating_add_signed]
overview = """
Saturating addition with a signed integer. Computes `self + rhs`,
saturating at the numeric bounds instead of overflowing.
"""
examples = """
assert_eq!(uint!(1).saturating_add_signed(int!(2)), uint!(3));
assert_eq!(uint!(1).saturating_add_signed(int!(-2)), uint!(0));
assert_eq!((uint::MAX - uint!(2)).saturating_add_signed(int!(4)), uint::MAX);
"""

[saturating_sub]
overview = """
Saturating integer subtraction. Computes `self - rhs`,
saturating at the numeric bounds instead of overflowing.
"""
examples = """
assert_eq!(uint!(100).saturating_sub(uint!(27)), uint!(73));
assert_eq!(uint!(13).saturating_sub(uint!(127)), uint!(0));
"""

[saturating_sub_signed]
overview = """
Saturating integer subtraction. Computes `self` - `rhs`,
saturating at the numeric bounds instead of overflowing.
"""
examples = """
assert_eq!(uint!(1).saturating_sub_signed(int!(2)), uint!(0));
assert_eq!(uint!(1).saturating_sub_signed(int!(-2)), uint!(3));
assert_eq!((uint::MAX - uint!(2)).saturating_sub_signed(int!(-4)), uint::MAX);
"""

[saturating_mul]
overview = """
Saturating integer multiplication. Computes `self * rhs`,
saturating at the numeric bounds instead of overflowing.
"""
examples = """
assert_eq!(uint!(2).saturating_mul(uint!(10)), uint!(20));
assert_eq!((uint::MAX).saturating_mul(uint!(10)), uint::MAX);
"""

[saturating_div]
overview = """
Saturating integer division. Computes `self / rhs`,
saturating at the numeric bounds instead of overflowing.

# Panics

This function will panic if `rhs` is zero.
"""
examples = """
assert_eq!(uint!(5).saturating_div(uint!(2)), uint!(2));
"""

[saturating_pow]
overview = """
Saturating integer exponentiation. Computes `self.pow(exp)`,
saturating at the numeric bounds instead of overflowing.
"""
examples = """
assert_eq!(uint!(4).saturating_pow(3), uint!(64));
assert_eq!(uint::MAX.saturating_pow(2), uint::MAX);
"""
