[wrapping_add]
overview = """
Wrapping (modular) addition. Computes `self + rhs`,
wrapping around at the boundary of the type.
"""
examples = """
assert_eq!(int!(100).wrapping_add(int!(27)), int!(127));
assert_eq!(int::MAX.wrapping_add(int!(2)), int::MIN + int!(1));
"""

[wrapping_add_unsigned]
overview = """
Wrapping (modular) addition with an unsigned integer. Computes `self + rhs`,
wrapping around at the boundary of the type.
"""
examples = """
assert_eq!(int!(100).wrapping_add_unsigned(uint!(27)), int!(127));
assert_eq!(int::MAX.wrapping_add_unsigned(uint!(2)), int::MIN + int!(1));
"""

[wrapping_sub]
overview = """
Wrapping (modular) subtraction. Computes `self - rhs`,
wrapping around at the boundary of the type.
"""
examples = """
assert_eq!(int!(0).wrapping_sub(int!(127)), int!(-127));
assert_eq!(int!(-2).wrapping_sub(int::MAX), int::MAX);
"""

[wrapping_sub_unsigned]
overview = """
Wrapping (modular) subtraction with an unsigned integer. Computes `self - rhs`,
wrapping around at the boundary of the type.
"""
examples = """
assert_eq!(int!(0).wrapping_sub_unsigned(uint!(127)), int!(-127));
assert_eq!(int!(-2).wrapping_sub_unsigned(uint::MAX), int!(-1));
"""

[wrapping_mul]
overview = """
Wrapping (modular) multiplication. Computes `self * rhs`,
wrapping around at the boundary of the type.
"""
examples = """
assert_eq!(int!(10).wrapping_mul(int!(12)), int!(120));
assert_eq!(11i8.wrapping_mul(12), -124);
"""

[wrapping_div]
overview = """
Wrapping (modular) division. Computes `self / rhs`,
wrapping around at the boundary of the type.

The only case where such wrapping can occur is when one divides `MIN / -1` on a
signed type (where `MIN` is the negative minimal value for the type); this is
equivalent to `-MIN`, a positive value that is too large to represent in the
type. In such a case, this function returns `MIN` itself.

# Panics

This function will panic if `rhs` is zero.
"""
examples = """
assert_eq!(int!(100).wrapping_div(int!(10)), int!(10));
assert_eq!((-128i8).wrapping_div(-1), -128);
"""

[wrapping_div_euclid]
overview = """
Wrapping Euclidean division. Computes `self.div_euclid(rhs)`,
wrapping around at the boundary of the type.

Wrapping will only occur in `MIN / -1` on a signed type (where `MIN` is the
negative minimal value for the type). This is equivalent to `-MIN`, a positive
value that is too large to represent in the type. In this case, this method
returns `MIN` itself.

# Panics

This function will panic if `rhs` is zero.
"""
examples = """
assert_eq!(int!(100).wrapping_div_euclid(int!(10)), int!(10));
assert_eq!((-128i8).wrapping_div_euclid(-1), -128);
"""

[wrapping_rem]
overview = """
Wrapping (modular) remainder. Computes `self % rhs`,
wrapping around at the boundary of the type.

Such wrap-around never actually occurs mathematically; implementation artifacts
make `x % y` invalid for `MIN / -1` on a signed type (where `MIN` is the
negative minimal value). In such a case, this function returns `0`.

# Panics

This function will panic if `rhs` is zero.
"""
examples = """
assert_eq!(int!(100).wrapping_rem(int!(10)), int!(0));
assert_eq!((-128i8).wrapping_rem(-1), 0);
"""

[wrapping_rem_euclid]
overview = """
Wrapping Euclidean remainder. Computes `self.rem_euclid(rhs)`,
wrapping around at the boundary of the type.

Wrapping will only occur in `MIN % -1` on a signed type (where `MIN` is the
negative minimal value for the type). In this case, this method returns 0.

# Panics

This function will panic if `rhs` is zero.
"""
examples = """
assert_eq!(int!(100).wrapping_rem_euclid(int!(10)), int!(0));
assert_eq!((-128i8).wrapping_rem_euclid(-1), 0);
"""

[wrapping_shl]
overview = """
Panic-free bitwise shift-left; yields `self << mask(rhs)`, where `mask` removes
any high-order bits of `rhs` that would cause the shift to exceed the bitwidth
of the type.

Note that this is *not* the same as a rotate-left; the RHS of a wrapping
shift-left is restricted to the range of the type, rather than the bits shifted
out of the LHS being returned to the other end. The primitive integer types all
implement a [`rotate_left`] function, which may be what you want instead.

[`rotate_left`]: Self::rotate_left
"""
examples = """
assert_eq!(int!(-1).wrapping_shl(7), int!(-128));
assert_eq!(int!(-1).wrapping_shl(128), int!(-1));
"""

[wrapping_shr]
overview = """
Panic-free bitwise shift-right; yields `self >> mask(rhs)`, where `mask` removes
any high-order bits of `rhs` that would cause the shift to exceed the bitwidth
of the type.

Note that this is *not* the same as a rotate-right; the RHS of a wrapping
shift-right is restricted to the range of the type, rather than the bits shifted
out of the LHS being returned to the other end. The primitive integer types all
implement a [`rotate_right`] function, which may be what you want instead.

[`rotate_right`]: Self::rotate_right
"""
examples = """
assert_eq!(int!(-128).wrapping_shr(7), int!(-1));
assert_eq!((-128i16).wrapping_shr(64), -128);
"""

[wrapping_neg]
overview = """
Wrapping (modular) negation. Computes `-self`,
wrapping around at the boundary of the type.

The only case where such wrapping can occur is when one negates `MIN` on a
signed type (where `MIN` is the negative minimal value for the type); this is a
positive value that is too large to represent in the type. In such a case, this
function returns `MIN` itself.
"""
examples = """
assert_eq!(int!(100).wrapping_neg(), int!(-100));
assert_eq!(int!(-100).wrapping_neg(), int!(100));
assert_eq!(int::MIN.wrapping_neg(), int::MIN);
"""

[wrapping_pow]
overview = """
Wrapping (modular) exponentiation. Computes `self.pow(exp)`,
wrapping around at the boundary of the type.
"""
examples = """
assert_eq!(int!(3).wrapping_pow(4), int!(81));
assert_eq!(3i8.wrapping_pow(5), -13);
assert_eq!(3i8.wrapping_pow(6), -39);
"""

[wrapping_abs]
overview = """
Wrapping (modular) absolute value. Computes `self.abs()`,
wrapping around at the boundary of the type.

The only case where such wrapping can occur is when one takes the absolute value
of the negative minimal value for the type; this is a positive value that is too
large to represent in the type. In such a case, this function returns `MIN` itself.
"""
examples = """
assert_eq!(int!(100).wrapping_abs(), int!(100));
assert_eq!(int!(-100).wrapping_abs(), int!(100));
assert_eq!(int::MIN.wrapping_abs(), int::MIN);
assert_eq!((-128i8).wrapping_abs() as u8, 128);
"""
