[max_value]
overview = """
New code should prefer to use [`int::MAX`] instead.

Returns the largest value that can be represented by this integer type.
"""

[min_value]
overview = """
New code should prefer to use [`int::MIN`] instead.

Returns the smallest value that can be represented by this integer type.
"""

[cast_unsigned]
overview = """
Returns the bit pattern of `self` reinterpreted as an unsigned integer of the same size.

This produces the same result as an `as` cast, but ensures that the bit-width
remains the same.
"""
examples = """
assert_eq!(int!(-1).cast_unsigned(), uint::MAX);
"""

[midpoint]
overview = """
Calculates the middle point of `self` and `rhs`.

`midpoint(a, b)` is `(a + b) >> 1` as if it were performed in a
sufficiently-large signed integral type. This implies that the result is always
rounded towards negative infinity and that no overflow will ever occur.
"""
examples = """
assert_eq!(int!(0).midpoint(int!(4)), int!(2));
assert_eq!(int!(-1).midpoint(int!(2)), int!(0));
assert_eq!(int!(-7).midpoint(int!(0)), int!(-3));
assert_eq!(int!(0).midpoint(int!(-7)), int!(-3));
assert_eq!(int!(0).midpoint(int!(7)), int!(3));
"""

[div_euclid]
overview = """
Calculates the quotient of Euclidean division of `self` by `rhs`.

This computes the integer `q` such that `self = q * rhs + r`, with
`r = self.rem_euclid(rhs)` and `0 <= r < abs(rhs)`.

In other words, the result is `self / rhs` rounded to the integer `q` such that
`self >= q * rhs`.
If `self > 0`, this is equal to rounding towards zero (the default in Rust);
if `self < 0`, this is equal to rounding away from zero (towards +/- infinity).
If `rhs > 0`, this is equal to rounding towards -infinity;
if `rhs < 0`, this is equal to rounding towards +infinity.

# Panics

This function will panic if `rhs` is zero or if `self` is `Self::MIN` and `rhs`
is -1. This behavior is not affected by the `overflow-checks` flag.
"""
examples = """
let a = int!(7);
let b = int!(4);

assert_eq!(a.div_euclid(b), int!(1)); // 7 >= 4 * 1
assert_eq!(a.div_euclid(-b), int!(-1)); // 7 >= -4 * -1
assert_eq!((-a).div_euclid(b), int!(-2)); // -7 >= 4 * -2
assert_eq!((-a).div_euclid(-b), int!(2)); // -7 >= -4 * 2
"""

[rem_euclid]
overview = """
Calculates the least nonnegative remainder of `self (mod rhs)`.

This is done as if by the Euclidean division algorithm -- given
`r = self.rem_euclid(rhs)`, the result satisfies
`self = rhs * self.div_euclid(rhs) + r` and `0 <= r < abs(rhs)`.

# Panics

This function will panic if `rhs` is zero or if `self` is `Self::MIN` and `rhs`
is -1. This behavior is not affected by the `overflow-checks` flag.
"""
examples = """
let a = int!(7);
let b = int!(4);

assert_eq!(a.rem_euclid(b), int!(3));
assert_eq!((-a).rem_euclid(b), int!(1));
assert_eq!(a.rem_euclid(-b), int!(3));
assert_eq!((-a).rem_euclid(-b), int!(1));
"""
examples_panicking = """
let _ = int::MIN.rem_euclid(int!(-1));
"""

[div_ceil]
overview = """
Calculates the quotient of `self` and `rhs`, rounding the result towards
positive infinity.

# Panics

This function will panic if `rhs` is zero or if `self` is `Self::MIN` and
`rhs` is -1. This behavior is not affected by the `overflow-checks` flag.
"""
examples = """
let a = int!(8);
let b = int!(3);

assert_eq!(a.div_ceil(b), int!(3));
assert_eq!(a.div_ceil(-b), int!(-2));
assert_eq!((-a).div_ceil(b), int!(-2));
assert_eq!((-a).div_ceil(-b), int!(3));
"""

[div_floor]
overview = """
Calculates the quotient of `self` and `rhs`, rounding the result towards negative infinity.

# Panics

This function will panic if `rhs` is zero or if `self` is `Self::MIN` and `rhs`
is -1. This behavior is not affected by the `overflow-checks` flag.
"""
examples = """
let a = int!(8);
let b = int!(3);

assert_eq!(a.div_floor(b), int!(2));
assert_eq!(a.div_floor(-b), int!(-3));
assert_eq!((-a).div_floor(b), int!(-3));
assert_eq!((-a).div_floor(-b), int!(2));
"""

[next_multiple_of]
overview = """
If `rhs` is positive, calculates the smallest value greater than or equal to
`self` that is a multiple of `rhs`. If `rhs` is negative, calculates the largest
value less than or equal to `self` that is a multiple of `rhs`.

# Panics

This function will panic if `rhs` is zero.

## Overflow behavior

On overflow, this function will panic if overflow checks are enabled (default in
debug mode) and wrap if overflow checks are disabled (default in release mode).
"""
examples = """
assert_eq!(int!(16).next_multiple_of(int!(8)), int!(16));
assert_eq!(int!(23).next_multiple_of(int!(8)), int!(24));
assert_eq!(int!(16).next_multiple_of(int!(-8)), int!(16));
assert_eq!(int!(23).next_multiple_of(int!(-8)), int!(16));
assert_eq!(int!(-16).next_multiple_of(int!(8)), int!(-16));
assert_eq!(int!(-23).next_multiple_of(int!(8)), int!(-16));
assert_eq!(int!(-16).next_multiple_of(int!(-8)), int!(-16));
assert_eq!(int!(-23).next_multiple_of(int!(-8)), int!(-24));
"""

[pow]
overview = """
Raises self to the power of `exp`, using exponentiation by squaring.
"""
examples = """
assert_eq!(int!(2).pow(5), int!(32));
"""

[ilog]
overview = """
Returns the logarithm of the number with respect to an arbitrary base, rounded down.

This method might not be optimized owing to implementation details; `ilog2` can
produce results more efficiently for base 2, and `ilog10` can produce results
more efficiently for base 10.

# Panics

This function will panic if `self` is less than or equal to zero, or if `base`
is less than 2.
"""
examples = """
assert_eq!(int!(5).ilog(int!(5)), 1);
"""

[ilog2]
overview = """
Returns the base 2 logarithm of the number, rounded down.

# Panics

This function will panic if `self` is less than or equal to zero.
"""
examples = """
assert_eq!(int!(2).ilog2(), 1);
"""

[ilog10]
overview = """
Returns the base 10 logarithm of the number, rounded down.

# Panics

This function will panic if `self` is less than or equal to zero.
"""
examples = """
assert_eq!(int!(10).ilog10(), 1);
"""

[isqrt]
overview = """
Returns the square root of the number, rounded down.

# Panics

This function will panic if `self` is negative.
"""
examples = """
assert_eq!(int!(10).isqrt(), int!(3));
"""

[abs_diff]
overview = """
Computes the absolute difference between `self` and `other`.

This function always returns the correct answer without overflow or panics by
returning an unsigned integer.
"""
examples = """
assert_eq!(int!(100).abs_diff(int!(80)), uint!(20));
assert_eq!(int!(100).abs_diff(int!(110)), uint!(10));
assert_eq!(int!(-100).abs_diff(int!(80)), uint!(180));
assert_eq!(int!(-100).abs_diff(int!(-120)), uint!(20));
assert_eq!(int::MIN.abs_diff(int::MAX), uint::MAX);
"""

[abs]
overview = """
Computes the absolute value of `self`.

## Overflow behavior

The absolute value of int::MIN cannot be represented as an `int`, and attempting
to calculate it will cause an overflow. This means that code in debug mode will
trigger a panic on this case and optimized code will return `int::MIN` without a
panic.
"""
examples = """
assert_eq!(int!(10).abs(), int!(10));
assert_eq!(int!(-10).abs(), int!(10));
"""

[unsigned_abs]
overview = """
Computes the absolute value of `self` without any wrapping or panicking.
"""
examples = """
assert_eq!(int!(100).unsigned_abs(), uint!(100));
assert_eq!(int!(-100).unsigned_abs(), uint!(100));
assert_eq!(int!(-128).unsigned_abs(), uint!(128));
"""

[is_negative]
overview = """
Returns `true` if `self` is negative and `false` if the number is zero or positive.
"""
examples = """
assert!(int!(-10).is_negative());
assert!(!int!(10).is_negative());
"""

[is_positive]
overview = """
Returns `true` if `self` is positive and `false` if the number is zero or negative.
"""
examples = """
assert!(int!(10).is_positive());
assert!(!int!(-10).is_positive());
"""

[signum]
overview = """
Returns a number representing sign of `self`.

- `0` if the number is zero
- `1` if the number is positive
- `-1` if the number is negative
"""
examples = """
assert_eq!(int!(10).signum(), int!(1));
assert_eq!(int!(0).signum(), int!(0));
assert_eq!(int!(-10).signum(), int!(-1));
"""
