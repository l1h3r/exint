[reverse_bits]
overview = """
Reverses the order of bits in the integer. The least significant bit becomes the
most significant bit, second least-significant bit becomes second
most-significant bit, etc.
"""
examples = """
use exint::$outer;

let n = $outer($inner!($to_swap));
let m = n.reverse_bits();

assert_eq!(m, $outer($inner!($reverse)));
assert_eq!($outer($inner!(0)), $outer($inner!(0).reverse_bits()));
"""

[swap_bytes]
overview = """
Reverses the byte order of the integer.
"""
examples = """
use exint::$outer;

let n = $outer($inner!($to_swap));
let m = n.swap_bytes();

assert_eq!(m, $outer($inner!($swapped)));
"""

[rotate_left]
overview = """
Shifts the bits to the left by a specified amount, `n`,
wrapping the truncated bits to the end of the resulting integer.

Please note this isn't the same operation as the `<<` shifting operator!
"""
examples = """
use exint::$outer;

let n: $outer<$inner> = $outer($inner!($rotate_from));
let m: $outer<$inner> = $outer($inner!($rotate_into));

assert_eq!(n.rotate_left($rotate_size), m);
"""

[rotate_right]
overview = """
Shifts the bits to the right by a specified amount, `n`,
wrapping the truncated bits to the beginning of the resulting integer.

Please note this isn't the same operation as the `>>` shifting operator!
"""
examples = """
use exint::$outer;

let n: $outer<$inner> = $outer($inner!($rotate_into));
let m: $outer<$inner> = $outer($inner!($rotate_from));

assert_eq!(n.rotate_right($rotate_size), m);
"""

[count_ones]
overview = """
Returns the number of ones in the binary representation of `self`.
"""
examples = """
use exint::$outer;

assert_eq!($outer($inner!(0b01001100)).count_ones(), 3);
"""

[count_zeros]
overview = """
Returns the number of zeros in the binary representation of `self`.
"""
examples = """
use exint::$outer;

assert_eq!($outer(!$inner!(0)).count_zeros(), 0);
"""

[leading_ones]
overview = """
"""
examples = """
assert_eq!($outer($inner!(0)).leading_ones(), 0);
"""

[leading_zeros]
overview = """
"""
examples = """
assert_eq!($outer($inner!(0)).leading_zeros(), $bits);
"""

[trailing_ones]
overview = """
Returns the number of trailing ones in the binary representation of `self`.
"""
examples = """
assert_eq!($outer($inner!(0b01010111)).trailing_ones(), 3);
"""

[trailing_zeros]
overview = """
Returns the number of trailing zeros in the binary representation of `self`.
"""
examples = """
assert_eq!($outer($inner!(0b00101000)).trailing_zeros(), 3);
"""
