[carrying_add]
overview = """
Calculates `self` + `rhs` + `carry` and returns a tuple containing the sum and the output carry.

Performs "ternary addition" of two integer operands and a carry-in bit, and
returns an output integer and a carry-out bit. This allows chaining together
multiple additions to create a wider addition, and can be useful for bignum
addition.

This can be thought of as a `Self::BITS`-bit "full adder", in the electronics sense.

If the input carry is false, this method is equivalent to [`overflowing_add`],
and the output carry is equal to the overflow flag. Note that although carry and
overflow flags are similar for unsigned integers, they are different for signed
integers.

[`overflowing_add`]: Self::overflowing_add
"""
examples = """
//    3  MAX    (a = 3 × 2^$bits + 2^$bits - 1)
// +  5    7    (b = 5 × 2^$bits + 7)
// ---------
//    9    6    (sum = 9 × 2^$bits + 6)

let (a1, a0): (uint, uint) = (uint!(3), uint::MAX);
let (b1, b0): (uint, uint) = (uint!(5), uint!(7));
let carry0 = false;

let (sum0, carry1) = a0.carrying_add(b0, carry0);
assert_eq!(carry1, true);
let (sum1, carry2) = a1.carrying_add(b1, carry1);
assert_eq!(carry2, false);

assert_eq!((sum1, sum0), (uint!(9), uint!(6)));
"""

[borrowing_sub]
overview = """
Calculates `self` &minus; `rhs` &minus; `borrow` and returns a tuple containing
the difference and the output borrow.

Performs "ternary subtraction" by subtracting both an integer operand and a
borrow-in bit from `self`, and returns an output integer and a borrow-out bit.
This allows chaining together multiple subtractions to create a wider
subtraction, and can be useful for bignum subtraction.
"""
examples = """
//    9    6    (a = 9 × 2^$bits + 6)
// -  5    7    (b = 5 × 2^$bits + 7)
// ---------
//    3  MAX    (diff = 3 × 2^$bits + 2^$bits - 1)

let (a1, a0): (uint, uint) = (uint!(9), uint!(6));
let (b1, b0): (uint, uint) = (uint!(5), uint!(7));
let borrow0 = false;

let (diff0, borrow1) = a0.borrowing_sub(b0, borrow0);
assert_eq!(borrow1, true);
let (diff1, borrow2) = a1.borrowing_sub(b1, borrow1);
assert_eq!(borrow2, false);

assert_eq!((diff1, diff0), (uint!(3), uint::MAX));
"""

[carrying_mul]
overview = """
Calculates the "full multiplication" `self * rhs + carry` without the possibility to overflow.

This returns the low-order (wrapping) bits and the high-order (overflow) bits of
the result as two separate values, in that order.

Performs "long multiplication" which takes in an extra amount to add, and may
return an additional amount of overflow. This allows for chaining together
multiple multiplications to create "big integers" which represent larger values.

If you don't need the `carry`, then you can use [`widening_mul`] instead.

[`widening_mul`]: Self::widening_mul
"""
examples = """
assert_eq!(uint!(5).carrying_mul(uint!(2), uint!(0)), (uint!(10), uint!(0)));
assert_eq!(uint!(5).carrying_mul(uint!(2), uint!(10)), (uint!(20), uint!(0)));
assert_eq!(uint!(1000000000).carrying_mul(uint!(10), uint!(0)), (uint!(1410065408), uint!(2)));
assert_eq!(uint!(1000000000).carrying_mul(uint!(10), uint!(10)), (uint!(1410065418), uint!(2)));
assert_eq!(uint::MAX.carrying_mul(uint::MAX, uint::MAX), (uint!(0), uint::MAX));
"""

[carrying_mul_add]
overview = """
Calculates the "full multiplication" `self * rhs + carry1 + carry2` without the possibility to overflow.

This returns the low-order (wrapping) bits and the high-order (overflow) bits of
the result as two separate values, in that order.

Performs "long multiplication" which takes in an extra amount to add, and may
return an additional amount of overflow. This allows for chaining together
multiple multiplications to create "big integers" which represent larger values.

If you don't need either `carry`, then you can use [`widening_mul`] instead,
and if you only need one `carry`, then you can use [`carrying_mul`] instead.

[`widening_mul`]: Self::widening_mul
[`carrying_mul`]: Self::carrying_mul
"""
examples = """
assert_eq!(uint!(5).carrying_mul_add(uint!(2), uint!(0), uint!(0)), (uint!(10), uint!(0)));
assert_eq!(uint!(5).carrying_mul_add(uint!(2), uint!(10), uint!(10)), (uint!(30), uint!(0)));
assert_eq!(uint!(1000000000).carrying_mul_add(uint!(10), uint!(0), uint!(0)), (uint!(1410065408), uint!(2)));
assert_eq!(uint!(1000000000).carrying_mul_add(uint!(10), uint!(10), uint!(10)), (uint!(1410065428), uint!(2)));
assert_eq!(uint::MAX.carrying_mul_add(uint::MAX, uint::MAX, uint::MAX), (uint::MAX, uint::MAX));
"""

[widening_mul]
overview = """
Calculates the complete product `self * rhs` without the possibility to overflow.

This returns the low-order (wrapping) bits and the high-order (overflow) bits of
the result as two separate values, in that order.

If you also need to add a carry to the wide result, then you want
[`carrying_mul`] instead.

[`carrying_mul`]: Self::carrying_mul
"""
examples = """
assert_eq!(uint!(5).widening_mul(uint!(2)), (uint!(10), uint!(0)));
assert_eq!(uint!(1000000000).widening_mul(uint!(10)), (uint!(1410065408), uint!(2)));
"""
